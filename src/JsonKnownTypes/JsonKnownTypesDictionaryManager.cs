using System;
using System.Collections.Generic;
using System.Linq;

namespace JsonKnownTypes
{
    internal static class JsonKnownTypesDictionaryManager
    {
        public static void AddJsonKnown<T>(this JsonKnownTypesSettings settings)
        {
            var attrs = AttributesManager.GetJsonKnownAttributes(typeof(T));
            foreach (var attr in attrs)
            {
                var discriminator = attr.Discriminator ?? attr.Type.Name;
                settings.AddType(attr.Type, discriminator);
            }
        }

        public static void AddJsonKnownThis(this JsonKnownTypesSettings settings, Type[] inherited)
        {
            foreach (var type in inherited)
            {
                var attr = AttributesManager.GetJsonKnownThisAttribute(type);
                if (attr != null)
                {
                    var discriminator = attr.Discriminator ?? type.Name;
                    settings.AddType(type, discriminator);
                }
            }
        }

        public static void AddAutoGenerated(this JsonKnownTypesSettings settings, Type[] inherited)
        {
            foreach (var type in inherited)
            {
                settings.AddIfIsNotContainsType(type, type.Name);
            }
        }

        public static Dictionary<string, Type> Revert(this Dictionary<Type, string> dictionary) 
            => dictionary.ToDictionary(x => x.Value, x => x.Key);
    }
}
