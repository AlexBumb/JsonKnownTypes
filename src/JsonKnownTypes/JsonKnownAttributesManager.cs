using System;
using System.Collections.Generic;
using JsonKnownTypes.Exceptions;

namespace JsonKnownTypes
{
    internal static class JsonKnownAttributesManager
    {
        public static void AddJsonKnown<T>(this Dictionary<Type, string> dictionary)
        {
            var attrs = (JsonKnownAttribute[])Attribute.GetCustomAttributes(typeof(T), typeof(JsonKnownAttribute));
            foreach (var attr in attrs)
            {
                var discriminator = attr.Discriminator ?? attr.Type.Name;
                if (!dictionary.ContainsKey(attr.Type) && !dictionary.ContainsValue(discriminator))
                {
                    dictionary.Add(attr.Type, discriminator);
                }
                else
                {
                    throw new AttributeArgumentException("", typeof(JsonKnownThisAttribute).Name); //todo
                }
            }
        }

        public static void AddJsonKnownThis(this Dictionary<Type, string> dictionary, Type[] inherited)
        {
            foreach (var type in inherited)
            {
                var attr = (JsonKnownThisAttribute)Attribute.GetCustomAttribute(type, typeof(JsonKnownThisAttribute));
                if (attr != null)
                {
                    if (!dictionary.ContainsKey(type) && !dictionary.ContainsValue(attr.Discriminator))
                    {
                        dictionary.Add(type, attr.Discriminator);
                    }
                    else
                    {
                        throw new AttributeArgumentException("", typeof(JsonKnownThisAttribute).Name);//todo
                    }
                }
            }
        }

        public static void AddAutoGenerated(this Dictionary<Type, string> dictionary, Type[] inherited)
        {
            foreach (var type in inherited)
            {
                if (!dictionary.ContainsKey(type) && !dictionary.ContainsValue(type.Name))
                    dictionary.Add(type, type.Name);
            }
        }
    }
}
