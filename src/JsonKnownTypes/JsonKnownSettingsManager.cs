using System;
using System.Collections.Generic;
using System.Linq;
using JsonKnownTypes.Exceptions;
using JsonKnownTypes.Utils;

namespace JsonKnownTypes
{
    public static class JsonKnownSettingsManager
    {
        public static JsonDiscriminatorSettings DiscriminatorSettings { get; set; } = new JsonDiscriminatorSettings();

        public static JsonKnownSettings GetSettings<T>()
        {
            var discriminatorAttribute = (JsonDiscriminatorAttribute)Attribute.GetCustomAttribute(typeof(T), typeof(JsonDiscriminatorAttribute));

            if (discriminatorAttribute != null)
                DiscriminatorSettings = Mapper.Map(discriminatorAttribute);

            var typeSettings = new JsonKnownSettings
            {
                Name = DiscriminatorSettings.Name
            };

            var allTypes = GetAllInheritance<T>();

            typeSettings.TypeToDiscriminator.AddJsonKnown<T>();
            typeSettings.TypeToDiscriminator.AddJsonKnownThis(allTypes);
            
            if (DiscriminatorSettings.AutoJsonKnownType)
            {
                typeSettings.TypeToDiscriminator.AddAutoGenerated(allTypes);
            }
            else if(!allTypes.All(typeSettings.TypeToDiscriminator.ContainsKey))
            {
                throw new AttributeArgumentException("exception", typeof(JsonKnownAttribute).Name); //todo
            }

            typeSettings.DiscriminatorToType = typeSettings.TypeToDiscriminator.Revert();

            return typeSettings;
        }

        private static Dictionary<string, Type> Revert(this Dictionary<Type, string> dictionary)
        {
            try
            {
                return dictionary.ToDictionary(x => x.Value, x => x.Key);
            }
            catch (ArgumentException e)
            {
                throw new AttributeArgumentException(e.Message, typeof(JsonKnownAttribute).Name); //todo
            }
        }

        private static Type[] GetAllInheritance<T>()
        {
            var type = typeof(T);
            return type.Assembly
                .GetTypes()
                .Where(x => type.IsAssignableFrom(x) && !x.IsInterface && !x.IsAbstract)
                .ToArray();
        }
    }
}
